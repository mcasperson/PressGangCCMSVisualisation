/*
 * CCVisu is a tool for visual graph clustering
 * and general force-directed graph layout.
 * This file is part of CCVisu. 
 * 
 * Copyright (C) 2005-2010  Dirk Beyer
 * 
 * CCVisu is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * CCVisu is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with CCVisu; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Please find the GNU Lesser General Public License in file
 * license_lgpl.txt or http://www.gnu.org/licenses/lgpl.txt
 * 
 * Dirk Beyer    (firstname.lastname@uni-passau.de)
 * University of Passau, Bavaria, Germany
 */

package ccvisu;

import java.io.PrintWriter;

/*****************************************************************
 * Writer for layouts in text format.
 * @version  $Revision: 1.24 $; $Date: 2007/12/15 01:20:50 $
 * @author   Dirk Beyer
 *****************************************************************/
public class WriterDataLAY extends WriterData {

  public WriterDataLAY(PrintWriter out, GraphData graph) {
    super(out, graph);
  }

  /*****************************************************************
   * Writes the layout data in text format LAY.
   *****************************************************************/
  @Override
  public void write() {
    out
        .println("# Generated by "
                 + Options.toolDescription()
                 + WriterData.endl
                 + "# "
                 + Options.currentDateTime()
                 + WriterData.endl
                 + "# Layout in RSF Format:"
                 + WriterData.endl
                 + "# LAY <x-pos_float> <y-pos_float> <z-pos_float> <edge-degree_int> "
                 + "<vertex-name_string> <rgb-color_int> <showName_bool>");
    for (GraphVertex lCurrVertex : graph.vertices) {
      if (lCurrVertex.showVertex) {
        out.println("LAY\t" + lCurrVertex.pos.x + "\t" + lCurrVertex.pos.y
                    + "\t" + lCurrVertex.pos.z + "\t" + lCurrVertex.degree
                    + "\t" + mkQuoted(lCurrVertex.name) + "\t"
                    + (lCurrVertex.color.getRGB() & 0x00FFFFFF) + "\t"
                    + lCurrVertex.showName);
      }
    }
  }

};
